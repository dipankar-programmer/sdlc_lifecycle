import os
import re
from datetime import datetime
from software_life_cycle.state.state import SoftwareLifecycle

# --- ðŸ”§ Utility Functions ---

def sanitize_filename(filename):
    return re.sub(r'[<>:"/\\|?*]', "_", filename)

def get_file_extension_from_lang(lang: str) -> str:
    mapping = {
        "python": "py",
        "html": "html",
        "css": "css",
        "javascript": "js",
        "js": "js",
        "ts": "ts",
        "typescript": "ts",
        "java": "java",
        "cpp": "cpp",
        "c++": "cpp",
        "c": "c",
        "go": "go",
        "json": "json",
        "yaml": "yaml",
        "dockerfile": "dockerfile",
    }
    return mapping.get(lang.strip().lower(), "txt")

def save_to_file(directory: str, filename: str, content: str):
    os.makedirs(directory, exist_ok=True)
    filepath = os.path.join(directory, filename)

    header = f"""# Generated by AI SDLC Workflow
# Created: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
# Purpose: Implementation of Hello World application

"""
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(header + content)
        print(f"Saved {filename}")
    except Exception as e:
        print(f"Error saving {filename}: {str(e)}")

def save_to_markdown(directory: str, filename: str, content: str):
    os.makedirs(directory, exist_ok=True)
    filepath = os.path.join(directory, filename)

    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"Saved {filename}")
    except Exception as e:
        print(f"Error saving {filename}: {str(e)}")

# --- Extract multiple code blocks
def extract_multiple_code_blocks(content: str) -> list[dict]:
    """Extract all code blocks with language detection"""
    blocks = []
    if not content or "```" not in content:
        return blocks

    parts = content.split("```")
    #When you split a markdown string on ``` (three backticks), you get:
    # Even indices = non-code (text)
    # Odd indices = code blocks

    # Example:

    # CONTENT - 
    # ```python
    # content = """
    # Here is a Python function:
    # ```python
    # def greet(name):
    #     return f"Hello, {name}"

    # INNRE WORKING
    # at i = 1
    # raw = parts[1]
    # result of the above line - 
    # python
    # def greet(name):
    #     return f"Hello, {name}"
    # lines = raw.strip().split("\n")
    # ['python', 'def greet(name):', '    return f"Hello, {name}"']
    # lang = lines[0].strip()  # 'python'
    # code = '\n'.join(lines[1:])  # 'def greet(name):\n    return f"Hello, {name}"'

    #RESULT -
    # {
    #     'lang': 'python',
    #     'extension': 'py',
    #     'code': 'def greet(name):\n    return f"Hello, {name}"'
    # }
    for i in range(1, len(parts), 2):
        raw = parts[i]
        lines = raw.strip().split("\n")
        lang = lines[0].strip() if lines else "txt"
        code = "\n".join(lines[1:]) if len(lines) > 1 else ""

        if not code.strip():
            continue

        ext = get_file_extension_from_lang(lang)
        blocks.append({
            "lang": lang,
            "extension": ext,
            "code": code.strip()
        })
    return blocks

def extract_code_from_markdown(content: str) -> str:
    """Extract a single test code block from markdown (fallback for test cases)."""
    if not content or "```" not in content:
        return ""

    # extracts the code between ``` and ```
    # and checks if it contains any of the keywords
    # EXAMPLE:
    # Testing Plan
    # These are the test cases:
    # ```python
    # def test_subtract():
    #     assert subtract(5, 3) == 2
    # Result:
    # ```python
    # def test_subtract():
    #     assert subtract(5, 3) == 2
    code_blocks = re.findall(r"```(?:\w+)?\n(.*?)```", content, re.DOTALL)
    for block in code_blocks:
        if any(k in block for k in ["def ", "assert", "unittest", "pytest"]):
            return block.strip()

    # Fallback: extract inline code lines if no fenced block found
    # Manual Test
    # def test_multiply(): assert multiply(2, 2) == 4
    # Result:
    # def test_multiply(): assert multiply(2, 2) == 4
    inline_lines = []
    for line in content.splitlines():
        if "def " in line or "assert " in line:
            inline_lines.append(line)

   

    return "\n".join(inline_lines).strip()


# --- Save Final Outputs ---
def save_final_outputs(state: SoftwareLifecycle):
    print("\n" + "=" * 30 + " Saving Final Outputs " + "=" * 30)

    # Create base folders
    for dir_path in ["output/generated_code", "output/test_cases", "output/design_docs", "output/user_stories"]:
        os.makedirs(dir_path, exist_ok=True)

    # Save User Stories
    if state.user_stories:
        content = f"# User Stories\nGenerated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n{state.user_stories}"
        save_to_markdown("output/user_stories", "user_stories.md", content)

    # Save Design Docs
    if state.design_documents:
        content = f"# Design Document\nGenerated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n{state.design_documents}"
        save_to_markdown("output/design_docs", "design_document.md", content)

    # Save Code Blocks
    if state.generated_code:
        for role, full_content in state.generated_code.items():
            blocks = extract_multiple_code_blocks(full_content)
            if not blocks:
                print(f" No code blocks found for {role}")
                continue

            print(f" Role: {role} â†’ Saving {len(blocks)} files...")

            for i, block in enumerate(blocks):
                base_name = sanitize_filename(role.replace(' ', '_').lower())
                if len(blocks) > 1:
                    filename = f"{base_name}_{i+1}.{block['extension']}"
                else:
                    filename = f"{base_name}.{block['extension']}"
                save_to_file("output/generated_code", filename, block["code"])

    # Save Test Cases
    if state.test_cases:
        if state.test_cases.strip():
            # Save full test plan markdown
            save_to_markdown("output/test_cases", "test_plan.md", state.test_cases)

            # Extract and save all code blocks by language
            test_blocks = extract_multiple_code_blocks(state.test_cases)
            if test_blocks:
                for i, block in enumerate(test_blocks):
                    ext = get_file_extension_from_lang(block["lang"])
                    filename = f"test_case_{i+1}.{ext}"
                    save_to_file("output/test_cases", filename, block["code"])
                print(f" Saved {len(test_blocks)} test code block(s) to individual files")
            else:
                print(" No code blocks found in test cases")

