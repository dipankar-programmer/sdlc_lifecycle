import os
import shutil
import pytest
from software_life_cycle.node.file_saver import *

OUTPUT_DIR = "test_output"

# @pytest.fixture(scope="function", autouse=True)
# def cleanup_test_output():
#     # Clean before and after each test
#     if os.path.exists(OUTPUT_DIR):
#         shutil.rmtree(OUTPUT_DIR)
#     yield
#     if os.path.exists(OUTPUT_DIR):
#         shutil.rmtree(OUTPUT_DIR)

def test_extract_code_from_markdown_basic():
    markdown = """```python
def hello():
    print("Hello World")
```"""
    code = extract_code_from_markdown(markdown)
    assert "def hello()" in code

def test_extract_code_skips_explanations():
    markdown = """Certainly! Here's the implementation:
```python
# explanation
```"""
    code = extract_code_from_markdown(markdown)
    assert code == ""

def test_get_file_extension_by_role():
    assert get_file_extension("C++ Developer") == "cpp"
    assert get_file_extension("Python Developer") == "py"
    assert get_file_extension("React Developer") == "jsx"
    assert get_file_extension("DevOps") == "yaml"
    assert get_file_extension("Unknown Role") == "txt"

def test_sanitize_filename_removes_invalid_characters():
    filename = "C++ Developer<>.cpp"
    sanitized = sanitize_filename(filename)
    assert "<" not in sanitized
    assert ">" not in sanitized
    assert sanitized.endswith(".cpp")

def test_save_to_file_creates_file():
    content = "print('Hello World')"
    filename = "hello_test.py"
    save_to_file(OUTPUT_DIR, filename, content)

    path = os.path.join(OUTPUT_DIR, filename)
    assert os.path.exists(path)

    with open(path, "r", encoding="utf-8") as f:
        saved_content = f.read()

    assert "Generated by AI SDLC Workflow" in saved_content
    assert "print('Hello World')" in saved_content
